# --- SIMULADOR DE PEDIDIOS DE COMIDA
"""
‚úÖ 1. Simulador de pedidos de comida

üìã Objetivo: Practicar create_task() + gather() con tiempos diferentes.

üß† Descripci√≥n:
Simul√° que hay varios pedidos de comida. Cada uno tarda un tiempo distinto en prepararse. Escrib√≠ una funci√≥n preparar_pedido(nombre: str, tiempo: int) que:

    Imprima cu√°ndo empieza y termina.

    Devuelva el nombre del pedido y cu√°nto tard√≥.

Corr√© 5 pedidos al mismo tiempo y mostr√° cu√°l sali√≥ primero y cu√°l √∫ltimo.
"""
import asyncio

# Funci√≥n principal que ser√° ejecutada por asyncio.run()
async def main():
    # Corrutina interna que simula la preparaci√≥n de un pedido
    # Una corrutina es una funci√≥n que puede pausar su ejecuci√≥n y reanudarla m√°s tarde.
    async def prepare_order(order: str = 'VASO CON AGUA', time: int = 1) -> str:
        print('Orden tomada, en un momento estar√° lista.')

        # Simula el tiempo que tarda en preparar el pedido (espera no bloqueante)
        await asyncio.sleep(time)
        print (f'Orden lista...')

        # Devuelve un string con la informaci√≥n del pedido
        return f'Pedido: {order}, tiempo de espera: {time}s'

    # Lista de pedidos que queremos preparar, cada uno es una corrutina que a√∫n NO ha comenzado.
    orders = [
        prepare_order('HAMBURGUESA', 4),
        prepare_order(),
        prepare_order('PIZZA', 5),
        prepare_order('PERRO CALIENTE', 3),
        prepare_order('HELADO', 2)
    ]

    # Creamos tareas con asyncio.create_task para que empiecen a ejecutarse en segundo plano.
    # Esto no las espera, solo las lanza de una.
    list_orders = [asyncio.create_task(order) for order in orders]

    # Esperamos a que todas las tareas se completen al mismo tiempo usando asyncio.gather.
    # Esto devuelve una lista con los resultados de cada corrutina.
    ready_orders = await asyncio.gather(*list_orders)

    # Mostramos los resultados una vez que todas las √≥rdenes est√©n listas.
    print('¬°Saliendo las ordenes!:')
    for order in ready_orders:
        print(order)


# Lanza el event loop y ejecuta la funci√≥n main()
# Esto es obligatorio en scripts para ejecutar c√≥digo asincr√≥nico
asyncio.run(main())

